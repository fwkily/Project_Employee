<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- Spring 配置文件核心 1、数据源 2、Mybatis整合 3、事务控制 -->

	<!-- 这里千万不能带use-default-filters=false 不然扫描不到带注解的bean -->
	<context:component-scan base-package="com.zm.employee.*">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 引入数据库配置文件 -->
	<context:property-placeholder location="classpath:db.properties" />
	<!-- 配置数据源 -->
	<bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认为：3 -->    
	    <property name="acquireIncrement" value="3"></property>
	    <!--定义在从数据库获取新连接失败后重复尝试的次数。默认为：30 -->    
	    <property name="acquireRetryAttempts" value="30"></property>
	    <!--两次连接中间隔时间，单位毫秒。默认为：1000 -->    
	    <property name="acquireRetryDelay" value="1000"></property>
	    
        <property name="initialPoolSize" value="3"></property>
	    <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。默认为：0 -->    
	    <property name="maxIdleTime" value="60"></property>
	    <!--连接池中保留的最大连接数。默认为：15 -->    
	    <property name="maxPoolSize" value="15"></property>    
        
	</bean>


	<!-- 整合Mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定Mybatis全局配置文件的位置 -->
		<property name="configLocation" value="classpath:mybatis.xml"></property>
		<!-- 指定数据源 -->
		<property name="dataSource" ref="pooledDataSource"></property>
		<!-- 指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	</bean>
	<!-- 配置扫描器 将Mybatis接口的实现加入到ioc中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描所有dao接口的实现类 加入到ioc中 -->
		<property name="basePackage" value="com.zm.employee.dao"></property>
	</bean>
	<!-- 配置可以批量执行的SQLSessionFactory -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>

	<!-- 事务控制 -->
	<!-- ===============事务控制的配置 ================ -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!--控制住数据源 -->
		<property name="dataSource" ref="pooledDataSource"></property>
	</bean>

	<!--开启基于注解的事务，使用xml配置形式的事务（必要主要的都是使用配置式） -->
	<aop:config>
		<!-- 切入点表达式 -->
		<aop:pointcut expression="execution(* com.zm.employee.service..*(..))"
			id="point" />
		<!-- 配置事务增强 -->
	</aop:config>

	<!--配置事务增强，事务如何切入 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 所有方法都是事务方法 -->
			<tx:method name="*" />
			<!--以get开始的所有方法 -->
			<tx:method name="get*" read-only="true" />
		</tx:attributes>
	</tx:advice>
    <aop:aspectj-autoproxy proxy-target-class="true"/> 
    <!--  ====================整合shiro=================   -->

     <!-- 1 配置securitymannager -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
    <!--  引用缓存管理器 -->
        <property name="cacheManager" ref="cacheManager" />
        <property name="realm" ref="jdbcRealm" />
        <!-- 设置remberMe有效期 -->
        <property name="rememberMeManager.cookie.maxAge" value="600"></property>
        <property name="realms">
            <list>
                <ref bean="jdbcRealm2"/>
                <ref bean="jdbcRealm"/>
            </list>
        </property>
    </bean>
  
    
    <!-- 2 配置缓存管理器    -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
    <!-- <property name="cacheManagerConfigFile" value="classpath:ehcache.xml" /> -->
          <property name="cacheManagerConfigFile" value="classpath:shiro-ehcache.xml" />  
    </bean>
     
    <!-- 3 配置realm 实现了Realm接口的bean -->
    <bean id="jdbcRealm" class="com.zm.employee.shiro.realm.ShiroRealm">
        <!-- 配置一个加密的凭证匹配器 -->
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <!-- 加密方式 -->
                <property name="hashAlgorithmName" value="MD5"></property>
                <!-- 加密次数 -->
                <property name="hashIterations" value="1024" />
            </bean>
        </property>
    </bean>
      <bean id="jdbcRealm2" class="com.zm.employee.shiro.realm.ShiroRealmUser">
        <!-- 配置一个加密的凭证匹配器 -->
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <!-- 加密方式 -->
                <property name="hashAlgorithmName" value="MD5"></property>
                <!-- 加密次数 -->
                <property name="hashIterations" value="1024" />
            </bean>
        </property>
    </bean>



    <!-- 4 配置LifecycleBeanPostProcessor 可以自动调用配置在SpringIOC容器中bean的生命周期方法 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

    <!-- 5 启用ioc容器中使用shiro注解 但必须配置了lifecycleBeanPostProcessor 才可以使用 -->
    <bean
        class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
        depends-on="lifecycleBeanPostProcessor" />
    <bean
        class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean>
    <!-- 配置管理器 id必须和web.xml的DelegatingFilterProxy的filter-name一样 如果不一致则抛出NoSuchBeanDefinition -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />

        <!-- 登陆页面url -->
        <property name="loginUrl" value="/AdminLogin" />
        <!-- 登陆成功页面 -->
        <property name="successUrl" value="/i" />
<!--         无权限页面 -->
        <property name="unauthorizedUrl" value="/index.jsp" />
<!--         引用我们自定义的Map -->
        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"></property>
        <!-- 配置哪些页面受保护以及访问这些页面需要的权限 
        anon 匿名可以访问 
        authc 必须认证之后才能访问 
        URL权限采取第一次匹配优先的原则 
        roles 角色权限控制  roles[权限名]
            logout 登出 
        <property name="filterChainDefinitions">
            <value>
                /login.jsp = anon
                /logout = logout
                /shiro_auth = anon
                /user.jsp = roles[user]
                /admin.jsp = roles[admin]
                
                /static/** = anon
                # everything else requires authentication:
                /** = authc
            </value>
        </property>
        -->
    </bean>
    <!-- 配置一个Bean  该Bean实际上是一个Map  通过实例工厂方法的方式 -->
    <bean id="filterChainDefinitionMap"
       factory-bean="filterChainDefinitionsBuilder" factory-method="buildFilterChainDefinitionMap"></bean>
    
    <!-- 先实例化我们自定义这个Map -->
    <bean id="filterChainDefinitionsBuilder"
              class="com.zm.employee.shiro.factory.FilterChainDefinitionsBuilder"></bean>
   <!-- ====================== Shiro整合结束  ============================================== -->
</beans>

